# -*- coding: utf-8 -*-
"""NLPActivities (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19KJtf7x_h9iaWTBILLBUows2Ebdt0JK6
"""

import nltk
nltk.download()

from nltk import word_tokenize
document = 'Tokenisation is really easy in NLTK'
words = word_tokenize(document)
print(words)

from nltk import word_tokenize
from nltk import pos_tag
document = 'Tokenisation is really easy in NLTK'
words = word_tokenize(document)
words_with_pos_tags = pos_tag(words)
for word, pos_tag in words_with_pos_tags:
  print(word, pos_tag)

from nltk import word_tokenize
from nltk import pos_tag
from nltk import bigrams
document = 'Tokenisation is really easy in NLTK'
words = word_tokenize(document)
words_with_pos_tags = pos_tag(words)
bigrams_with_pos_tags = list(bigrams(words_with_pos_tags))
for first_element, second_element in bigrams_with_pos_tags:
  print(first_element, second_element)

from nltk import word_tokenize
from nltk import pos_tag
from nltk import bigrams
document = 'Tokenisation is really easy in NLTK'
words = word_tokenize(document)
words_with_pos_tags = pos_tag(words)
bigrams_with_pos_tags = list(bigrams(words_with_pos_tags))
for first_element, second_element in bigrams_with_pos_tags:
  first_word_of_bigram, first_word_pos_tag = first_element[0], first_element[1]
  second_word_of_bigram, second_word_pos_tag = second_element[0], second_element[1]
  print(first_word_of_bigram, first_word_pos_tag, second_word_of_bigram, second_word_pos_tag)

def compute_frequency_of_bigrams(bigrams_with_pos_tags):
  bigrams_with_frequencies = {}

  for first_element, second_element in bigrams_with_pos_tags:
    bigram_string = first_element[0]+' '+second_element[0]
    if bigram_string in bigrams_with_frequencies:
      bigrams_with_frequencies[bigram_string] += 1
    else:
      bigrams_with_frequencies[bigram_string] = 1

  return bigrams_with_frequencies

from nltk import word_tokenize
from nltk import pos_tag
from nltk import bigrams
document = 'The city of New York is often called New York City or simply New York'
words = word_tokenize(document)
words_with_pos_tags = pos_tag(words)
bigrams_with_pos_tags = list(bigrams(words_with_pos_tags))

bigrams_with_frequencies = compute_frequency_of_bigrams(bigrams_with_pos_tags)


for bigram, frequency in bigrams_with_frequencies.items():
  print(bigram, frequency)

from nltk import word_tokenize
from nltk import pos_tag
from nltk import bigrams
import operator
document = 'The city of New York is often called New York City or simply New York'
words = word_tokenize(document)
words_with_pos_tags = pos_tag(words)
bigrams_with_pos_tags = list(bigrams(words_with_pos_tags))

bigrams_with_frequencies = compute_frequency_of_bigrams(bigrams_with_pos_tags)

bigrams_with_frequencies = dict(sorted(bigrams_with_frequencies.items(), key=operator.itemgetter(1), reverse = True))

for bigram, frequency in bigrams_with_frequencies.items():
  print(bigram, frequency)